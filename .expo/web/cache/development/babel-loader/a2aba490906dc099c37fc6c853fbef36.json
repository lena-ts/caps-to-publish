{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/PROJECTS/LOOK/dev/src/components/EmptyScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { commonStyles } from \"../styles/styles\";\nimport i18n from 'i18n-js';\nimport { BG_COLOR } from \"../theme\";\nimport { ImagePickerButtons } from \"./ui/buttons/ImagePickerButtons\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Shade } from \"./ui/Shade\";\nimport { useDispatch } from \"react-redux\";\nimport { setAddItemModal } from \"../store/actions\";\nexport var EmptyScreen = function EmptyScreen(_ref) {\n  var text = _ref.text,\n      modalShow = _ref.modalShow,\n      transferImage = _ref.transferImage;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var handleUploadImagePressed = function handleUploadImagePressed() {\n    var result;\n    return _regeneratorRuntime.async(function handleUploadImagePressed$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [9, 16],\n              quality: 1,\n              allowsMultipleSelection: true\n            }));\n\n          case 2:\n            result = _context.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              dispatch(setAddItemModal(true));\n              transferImage(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleCameraPressed = function handleCameraPressed() {\n    var result;\n    return _regeneratorRuntime.async(function handleCameraPressed$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [9, 16],\n              quality: 1,\n              allowsMultipleSelection: true\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              dispatch(setAddItemModal(true));\n              transferImage(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: [commonStyles.view, {\n      backgroundColor: BG_COLOR\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 375,\n      height: 300\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 27\n    }\n  })), React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, i18n.t(text)), React.createElement(ImagePickerButtons, {\n    handleCameraPressed: handleCameraPressed,\n    handleUploadImagePressed: handleUploadImagePressed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), React.createElement(Shade, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }));\n};\nvar styles = StyleSheet.create({\n  title: {\n    fontSize: 30,\n    textAlign: 'center',\n    fontWeight: '500',\n    zIndex: 1,\n    marginTop: -50\n  }\n});","map":{"version":3,"sources":["/Users/admin/PROJECTS/LOOK/dev/src/components/EmptyScreen.js"],"names":["React","useState","useEffect","commonStyles","i18n","BG_COLOR","ImagePickerButtons","ImagePicker","Shade","useDispatch","setAddItemModal","EmptyScreen","text","modalShow","transferImage","image","setImage","dispatch","handleUploadImagePressed","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","allowsMultipleSelection","result","cancelled","uri","handleCameraPressed","launchCameraAsync","view","backgroundColor","width","height","styles","title","t","StyleSheet","create","fontSize","textAlign","fontWeight","zIndex","marginTop"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;AAEA,SAAQC,YAAR;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAAQC,QAAR;AACA,SAAQC,kBAAR;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,SAAQC,KAAR;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,eAAR;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAsC;AAAA,MAApCC,IAAoC,QAApCA,IAAoC;AAAA,MAA9BC,SAA8B,QAA9BA,SAA8B;AAAA,MAAnBC,aAAmB,QAAnBA,aAAmB;;AAAA,kBACnCb,QAAQ,CAAC,IAAD,CAD2B;AAAA;AAAA,MACtDc,KADsD;AAAA,MAC/CC,QAD+C;;AAE7D,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AAaA,MAAMS,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVX,WAAW,CAACY,uBAAZ,CAAoC;AACnDC,cAAAA,UAAU,EAAEb,WAAW,CAACc,gBAAZ,CAA6BC,GADU;AAEnDC,cAAAA,aAAa,EAAE,IAFoC;AAGnDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAH2C;AAInDC,cAAAA,OAAO,EAAE,CAJ0C;AAKnDC,cAAAA,uBAAuB,EAAE;AAL0B,aAApC,CADU;;AAAA;AACzBC,YAAAA,MADyB;;AAS7B,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuB;AACnBZ,cAAAA,QAAQ,CAACW,MAAM,CAACE,GAAR,CAAR;AAEAZ,cAAAA,QAAQ,CAACP,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAI,cAAAA,aAAa,CAACa,MAAM,CAACE,GAAR,CAAb;AACH;;AAd4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAkBA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACLvB,WAAW,CAACwB,iBAAZ,CAA8B;AAC7CX,cAAAA,UAAU,EAAEb,WAAW,CAACc,gBAAZ,CAA6BC,GADI;AAE7CC,cAAAA,aAAa,EAAE,IAF8B;AAG7CC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAHqC;AAI7CC,cAAAA,OAAO,EAAE,CAJoC;AAK7CC,cAAAA,uBAAuB,EAAE;AALoB,aAA9B,CADK;;AAAA;AACpBC,YAAAA,MADoB;;AASxB,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuB;AACnBZ,cAAAA,QAAQ,CAACW,MAAM,CAACE,GAAR,CAAR;AAEAZ,cAAAA,QAAQ,CAACP,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAI,cAAAA,aAAa,CAACa,MAAM,CAACE,GAAR,CAAb;AACH;;AAduB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAkBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAC1B,YAAY,CAAC6B,IAAd,EAAoB;AAACC,MAAAA,eAAe,EAAG5B;AAAnB,KAApB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKU,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEc,MAAAA,GAAG,EAAEd;AAAP,KAAf;AAA+B,IAAA,KAAK,EAAE;AAAEmB,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADd,CADJ,EAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjC,IAAI,CAACkC,CAAL,CAAO1B,IAAP,CADL,CAJJ,EAOI,oBAAC,kBAAD;AACI,IAAA,mBAAmB,EAAEkB,mBADzB;AAEI,IAAA,wBAAwB,EAAEZ,wBAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAWI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADJ;AAeH,CAlEM;AAoEP,IAAMkB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,KAAK,EAAE;AACHI,IAAAA,QAAQ,EAAE,EADP;AAEHC,IAAAA,SAAS,EAAE,QAFR;AAGHC,IAAAA,UAAU,EAAE,KAHT;AAIHC,IAAAA,MAAM,EAAE,CAJL;AAKHC,IAAAA,SAAS,EAAE,CAAC;AALT;AADsB,CAAlB,CAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {View, Text, StyleSheet, Image} from \"react-native\";\nimport {commonStyles} from '../styles/styles'\nimport i18n from 'i18n-js';\nimport {BG_COLOR} from \"../theme\";\nimport {ImagePickerButtons} from \"./ui/buttons/ImagePickerButtons\";\nimport * as ImagePicker from 'expo-image-picker';\nimport {Shade} from \"./ui/Shade\";\nimport {useDispatch} from \"react-redux\";\nimport {setAddItemModal} from \"../store/actions\";\n\nexport const EmptyScreen = ({text, modalShow, transferImage}) => {\n    const [image, setImage] = useState(null);\n    const dispatch = useDispatch()\n\n    // useEffect(() => {\n    //     (async () => {\n    //         if (Platform.OS !== 'web') {\n    //             const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync() && await ImagePicker.requestCameraPermissionsAsync();\n    //             if (status !== 'granted') {\n    //                 alert('Sorry, we need camera roll permissions to make this work!');\n    //             }\n    //         }\n    //     })();\n    // }, []);\n\n    const handleUploadImagePressed = async () => {\n        let result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [9, 16],\n            quality: 1,\n            allowsMultipleSelection: true\n        });\n\n        if (!result.cancelled) {\n            setImage(result.uri);\n            // modalShow()\n            dispatch(setAddItemModal(true))\n            transferImage(result.uri)\n        }\n\n    }\n\n    const handleCameraPressed = async () => {\n        let result = await ImagePicker.launchCameraAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [9, 16],\n            quality: 1,\n            allowsMultipleSelection: true\n        });\n\n        if (!result.cancelled) {\n            setImage(result.uri);\n            // modalShow()\n            dispatch(setAddItemModal(true))\n            transferImage(result.uri)\n        }\n\n    }\n\n    return(\n        <View style={[commonStyles.view, {backgroundColor:  BG_COLOR}]}>\n            <View>\n                {image && <Image source={{ uri: image }} style={{ width: 375, height: 300 }} />}\n            </View>\n            <Text style={styles.title}>\n                {i18n.t(text)}\n            </Text>\n            <ImagePickerButtons\n                handleCameraPressed={handleCameraPressed}\n                handleUploadImagePressed={handleUploadImagePressed}\n            />\n            <Shade/>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    title: {\n        fontSize: 30,\n        textAlign: 'center',\n        fontWeight: '500',\n        zIndex: 1,\n        marginTop: -50\n    },\n})"]},"metadata":{},"sourceType":"module"}